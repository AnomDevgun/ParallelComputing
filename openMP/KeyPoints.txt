1)Race condition: is when unintended access is done by threads, to solve this we use synchronization techniques.
	-The outcome changes every time the program is run
	-This is a very dangerous thing and needs mitigation.

2)Synchronization: should be used as little as possible as it makes the effectivness of multi threaded programming less.

3)openMP: allows for multithreaded programming on shared memory architechture (SMP- symmetric multiprocessing)
-Symmetric Multiprocessor(SMA): A shared address space with equal-time acess for each processor, and the OS treats each processor the same way.
-Non Uniform Address Space Multiprocessor(NUMA): Different memory regions have different access costs, segmented into "near" and "far" memory if you wish to visualize what it would look like.
-It is a multithreaded programming language for shared memory systems.

4)The main program i.e main thread that calls all other threads is itself a thread, thread 0 and runs alongside the other threads in a "team of threads" so as to speak.

5)openMP interacts with the compiler via pthreads library at its core, its basically pthreads abstracted to save you the effort of the low level interaction.

6)Concurrency: multiple things happening at once.(Swapping)
ex:Web Servers

7)Parallel: happening simultaneously, i.e tasks occur side by side as opposed to switching in between.(get more work done faster)

8)What is openMP:
-An API(application programmng interface) for writing multithreaded applications.
-A set of compiler directives and library routines for parallel application programmers.
-Greatly simplifies writing multi-threaded programs in Fortran, C, C++
	-Shared Address Space.
		-OS or runtime environment to support it
			-Programming Layer(We are here)
				-Application/End user.
				
- #pragma omp construct_name
- #include<omp.h>	

9)Process: is an instance of a program execution, or the execution context of a running program(resources associated with the program). 
Process has the following:
-Stack: to store function calls and callbacks(Stack fragmented into threads, share text,data and heap).
-Text: Store the code
-Data: Store the data like integers, arrays etc related to the code.
-Heap: Shared memory belonging to the process and is accessed by all threads.
